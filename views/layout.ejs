<!DOCTYPE html>
<html>
  <head>
    <title>Poll App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/poll-general.css">
    <link rel="stylesheet" href="/styles/vendor/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/vendor/font-awesome.min.css">
    <!--STYLES END-->
		
    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/vendor/jquery-1.11.1.min.js"></script>
    <script src="/js/vendor/bootstrap.min.js"></script>
    <!--SCRIPTS END-->
		
    <script type="text/javascript">
      window.overlord = { csrf: '<%= _csrf %>'};
    </script>
  </head>

  <body>
		<nav class="navbar navbar-default navbar-poller container" role="navigation">
		  <div class="container-fluid">
		    <!-- Brand and toggle get grouped for better mobile display -->
		    <div class="navbar-header">
		      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
		        <span class="sr-only">Toggle navigation</span>
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		      </button>
		    </div>

		    <!-- Collect the nav links, forms, and other content for toggling -->
		    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
		      <ul class="nav navbar-nav navbar-right">
		        <li>
							<% if (session.authenticated) { %>
								<a class="btn btn-link" href="/session/destroy">Sign Out</a>
							<% } else { %>		
			          <button type="button"
			                  class="btn btn-primary btn-link"
			                  data-toggle="modal"
			                  data-target="#sign-in-modal">
			            Sign In
			          </button>
							<% } %>
		        </li>
		      </ul>
		    </div><!-- /.navbar-collapse -->
		  </div><!-- /.container-fluid -->
		</nav>
		
    <%- body %>

		<footer class="footer">
		  <div class="container">
				<div class="row">
					<div class="left-footer col-xs-5">
						<a href="/" class="text-muted"><i class="fa fa-home"></i> Home</a>
						<a href="https://www.linkedin.com/in/llorencmuntaner" class="text-muted" target="_blank"><i class="fa fa-phone"></i> Contact</a>
						<a href="https://github.com/lmuntaner" class="text-muted" target="_blank"><i class="fa fa-fighter-jet"></i> About</a>
					</div>
					<div class="right-footer col-xs-5">
						<p class="text-muted">&copy; Llorenc Muntaner, 2014</p>
					</div>
				</div>
		  </div>
		</footer>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
			
    
    
  </body>
</html>
